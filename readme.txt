*********************
WEVAI - Prueba t√©cnica
por Pedro Gil
***********************

REQUERIMIENTO

Desarrollar el m√≥dulo de la derecha, tanto en desktop como mobile, utilizando √∫nicamente PHP, SCSS/CSS y JS.

Respetar las distancias, tama√±os y pesos de texto, colores y dem√°s detalles
- Exportar las im√°genes directamente desde este Figma
- Usar fuente Montserrat [https://fonts.google.com/specimen/Montserrat]
- El m√≥dulo debe estar contenido en una caja de 1440px de ancho m√°ximo
- Usar la librer√≠a Swiper [https://swiperjs.com/get-started#use-swiper-from-cdn]
- A√±adir efecto de hover a los bloques como se muestra en el primero
- Al hacer click en ‚ÄúM√°s informaci√≥n‚Äù en cualquier bloque:
    - Debe aparecer la modal de abajo con un efecto de fade-in
    - La modal debe contener el t√≠tulo del bloque clickado
    - La modal debe desaparecer al clickar en el fondo oscurecido o en ‚ÄúLo quiero‚Äù con un efecto de fade-out


/*  PLANTEAMIENTO */

Estructura de carpetas y archivos favoreciendo la separaci√≥n de funciones, componentes y dem√°s 
con la idea de favorecer su reutilizaci√≥n y la escalabilidad del proyecto, simulando que este componente
forma parte de un proyecto m√°s amplio.

El proyecto ha sidp desarrollo utilizando Visual Studio Code, con un servidor local configurado
mediante el comando php -S localhost:8000, permitiendo probar y desarrollar la aplicaci√≥n web antes de llevarlo a producci√≥n.

 
/* DESARROLLO */
1. Trasladar info del dise√±o y convertirla en variables (tama√±os, colores, etc).

2. Desarrollar partes del componente.

    /* BASE DE DATOS */

    - Crear archivo dataProjectsCarousel.php que contiene datos usados en el componente. ‚úî
    - Convertirlo en json para uso en front.
        Ubicaci√≥n: projectsCarousel.php


    /* SWIPER */

    Debe generar un slider por proyecto en la base de datos.

    - Instalar librer√≠a. ‚úî

    - Loop para generar las tarjetas de proyecto como sliders. ‚úî

        Nota: Por falta de tiempo y desconocimiento de la librer√≠a, opto por overridear el estilo de swiper con !important.  üî®

        Update: Swiper customizado en mayor parte. Overrideando swiper slide height. ‚úî

    - Guardar la id del proyecto en el dataset de cada proyecto mostrado para usarlo en modal. ‚úî
    

    /* MODAL */

    Debe mostrar el nombre del proyecto y un bot√≥n de compra. Al clicar en el bot√≥n o en la capa multiply se cierra el modal.

    - Consiste en:
        - Modal container con la informaci√≥n del proyecto y el bot√≥n de compra. ‚úî
        - Modal multiply. ‚úî

    - Funci√≥n para dar formato al precio, separando n¬∫ entero y decimal para aplicarles diferentes tama√±os. ‚úî
        Ubicaci√≥n:  functions.php > formatPrice()

    - Funci√≥n para:
        - Mostrar el modal usando la id del proyecto al clicar sobre bot√≥n. ‚úî
        - Dar clases fade in. ‚úî
        
        Ubicaci√≥n:  modal.js > showModal();
    
    - Funci√≥n para: 
        - Dar y quitar clase fade out. ‚úî
        - Vaciar el texto del modal. ‚úî
        - Cambiar el atributo style del modal a none. ‚úî
        - Cerrar el modal. ‚úî

        Ubicaci√≥n:  modal.js > closeModal();


    ‚ùï Nota: conflicto entre propiedad display y opacity de los elementos en modal. 
        Update: Solucionado usando setTimeOut. ‚úî

    ‚ùï Nota: conflicto entre transiciones, opacidad y mix-blend-mode de los elementos en modal. 
        Update: Solucionado separando la adici√≥n y eliminaci√≥n de clases. ‚úî


    /* BUTTONS */

    INFO BTN:
    - Cambiar contenido de botones seg√∫n resoluci√≥n. ‚úî
        Ubicaci√≥n: buttons.js > updateButtonText();


    BUY BTN:
    Al clicar en ¬°Lo quiero! se llama a la funci√≥n para comprar y cerrar el modal. ‚úî

    - Funci√≥n para:
        - Mostrar producto seleccionado
        - Cerrar modal

        Ubicaci√≥n: modal.js > buyProject();


    Nota: A√±adido hover style por decisi√≥n propia para mejorar UX.